train.data.frame          <- NOx.Emission_Trainset_NOX
train.data.frame.Modified <- Modified_Trainset_NOX
test.data.frame.for.LR    <- NOx.Emission_Trainset_UREA
test.data.frame.for.UREA  <- NOx.Emission_Testset
#
# -----------------------------------------------------------------------------------
## Number Of Data Set
numOfDataSet <- 1094
# -----------------------------------------------------------------------------------
# ?룞?쟻 紐⑤뜽 ?떎?뻾
# -----------------------------------------------------------------------------------
## Perform "Optimal UREA Flow Prediction"
source("./NOx_Prediction_(Linear_Regression).R")
# source("D:/work/Rcode/BoilerEFF/NOx_Prediction/NOx_UREA_Prediction/NOx_Prediction_ANN_Model_for_UREA.R")
source("./Optimal_UREA_Flow_Prediction.R")
# -----------------------------------------------------------------------------------
library(h2o)
library(methods)
library(evd)
library(readxl)
library(xlsx)
NOx.Emission_Trainset_NOX  <- read_excel("./NOx_prediction_(Boiler_9)_ver5_(stack_O2).xlsx", sheet = "NOX_train")
Modified_Trainset_NOX      <- read_excel("./NOx_prediction_(Boiler_9)_ver5_(stack_O2).xlsx", sheet = "Modified_NOX_train")
NOx.Emission_Trainset_UREA <- read_excel("./NOx_prediction_(Boiler_9)_ver5_(stack_O2).xlsx", sheet = "UREA_train")
NOx.Emission_Testset       <- read_excel("./NOx_prediction_(Boiler_9)_ver5_(stack_O2).xlsx", sheet = "test6")
# ## Calculating average O2
Average.O2_Train_NOX           <- (subset(NOx.Emission_Trainset_NOX, select="O2_D") +
subset(NOx.Emission_Trainset_NOX, select="O2_E") +
subset(NOx.Emission_Trainset_NOX, select="O2_F")) / 3
Average.O2_Modified_Train_NOX  <- (subset(Modified_Trainset_NOX, select="O2_D") +
subset(Modified_Trainset_NOX, select="O2_E") +
subset(Modified_Trainset_NOX, select="O2_F")) / 3
Average.O2_Train_UREA          <- (subset(NOx.Emission_Trainset_UREA, select="O2_D") +
subset(NOx.Emission_Trainset_UREA, select="O2_E") +
subset(NOx.Emission_Trainset_UREA, select="O2_F")) / 3
Average.O2_Test                <- (subset(NOx.Emission_Testset, select="O2_D") +
subset(NOx.Emission_Testset, select="O2_E") +
subset(NOx.Emission_Testset, select="O2_F")) / 3
colnames(Average.O2_Train_NOX)           <- "Average_O2"
colnames(Average.O2_Modified_Train_NOX)  <- "Average_O2"
colnames(Average.O2_Train_UREA)          <- "Average_O2"
colnames(Average.O2_Test)                <- "Average_O2"
# NOx revising
NOx.revising_Train          <- (subset(NOx.Emission_Trainset_NOX, select="FLUE_GAS_NOX") *
(21 - 4) / (21 - subset(NOx.Emission_Trainset_NOX, select="STACK_O2")))
NOx.revising_Modified_Train <- (subset(Modified_Trainset_NOX, select="FLUE_GAS_NOX") *
(21 - 4) / (21 - subset(Modified_Trainset_NOX, select="STACK_O2")))
NOx.revising_Train_UREA     <- (subset(NOx.Emission_Trainset_UREA, select="FLUE_GAS_NOX") *
(21 - 4) / (21 - subset(NOx.Emission_Trainset_UREA, select="STACK_O2")))
NOx.revising_Test           <- (subset(NOx.Emission_Testset, select="FLUE_GAS_NOX") *
(21 - 4) / (21 - subset(NOx.Emission_Testset, select="STACK_O2")))
colnames(NOx.revising_Train)           <- "Revised_NOX"
colnames(NOx.revising_Modified_Train)  <- "Revised_NOX"
colnames(NOx.revising_Train_UREA)      <- "Revised_NOX"
colnames(NOx.revising_Test)            <- "Revised_NOX"
NOx.Emission_Trainset_NOX  <- cbind(NOx.Emission_Trainset_NOX[,c(1:11,15)], Average.O2_Train_NOX, NOx.revising_Train)
Modified_Trainset_NOX      <- cbind(Modified_Trainset_NOX[,c(1:11,15)], Average.O2_Modified_Train_NOX, NOx.revising_Modified_Train)
NOx.Emission_Trainset_UREA <- cbind(NOx.Emission_Trainset_UREA[,c(1:11,15)], Average.O2_Train_UREA, NOx.revising_Train_UREA)
NOx.Emission_Testset       <- cbind(NOx.Emission_Testset[,c(1:11,15)], Average.O2_Test, NOx.revising_Test)
# View(NOx.Emission_Trainset)
# View(NOx.Emission_Testset)
# ## Input data
train.data.frame          <- NOx.Emission_Trainset_NOX
train.data.frame.Modified <- Modified_Trainset_NOX
test.data.frame.for.LR    <- NOx.Emission_Trainset_UREA
test.data.frame.for.UREA  <- NOx.Emission_Testset
# -----------------------------------------------------------------------------------
# ?젙?쟻 紐⑤뜽 ?떎?뻾
# -----------------------------------------------------------------------------------
# ## Construct ANN Model
source("./NOx_Prediction_ANN_Model_for_LR.R")
# # ## Perform UREA Linear Regression
source("./UREA_Linear_Regression.R")
#
# -----------------------------------------------------------------------------------
## Number Of Data Set
numOfDataSet <- 1094
Target_NOx <- 45
# -----------------------------------------------------------------------------------
# ?룞?쟻 紐⑤뜽 ?떎?뻾
# -----------------------------------------------------------------------------------
## Perform "Optimal UREA Flow Prediction"
source("./NOx_Prediction_(Linear_Regression).R")
# -----------------------------------------------------------------------------------
# ?젙?쟻 紐⑤뜽 ?떎?뻾
# -----------------------------------------------------------------------------------
# ## Construct ANN Model
source("./NOx_Prediction_ANN_Model_for_LR.R")
# -------------------------------------------------------------------------------------------
# Data Modification
# -------------------------------------------------------------------------------------------
h2o.init()
train.data.frame.NOx_LR.h2o <- as.h2o(subset(train.data.frame.Modified, select = c(-UREA_WATER_FLOW_CONTROL, -FLUE_GAS_NOX)))
test.data.frame.for.NOx_LR.h2o <- as.h2o(subset(test.data.frame.for.UREA, select = c(-UREA_WATER_FLOW_CONTROL, -FLUE_GAS_NOX)))
y <- "Revised_NOX"
x <- setdiff(names(train.data.frame.h2o),y)
x <- setdiff(names(train.data.frame.NOx_LR.h2o),y)
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o.1min <- h2o.deeplearning(x, y, train.data.frame.NOx_LR.h2o, activation = "Tanh", hidden = c(15),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o.1min   <- h2o.predict(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
performance.NOx.Emission.h2o.1min <- h2o.performance(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict, test.data.frame.for.NOx_LR.h2o$Revised_NOX))
predicted.NOx.Emission.h2o.1min   <- h2o.predict(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
performance.NOx.Emission.h2o.1min <- h2o.performance(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict, test.data.frame.for.NOx_LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o.1min <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict))
test.FLUE_GAS_NOX.1min       <- as.data.frame(as.numeric(test.data.frame.for.NOx_LR.h2o$Revised_NOX))
test.FLUE_GAS_NOX.1min
test.FLUE_GAS_NOX.1min       <- test.FLUE_GAS_NOX.1min[[1]]
test.FLUE_GAS_NOX.1min
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX.1min, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o.1min, col="red", lwd=2)
------------------------------------------
# Data Modification
# -------------------------------------------------------------------------------------------
train.data.frame.NOx_LR <- subset(train.data.frame.Modified, select = c(-UREA_WATER_FLOW_CONTROL, -FLUE_GAS_NOX))
test.data.frame.for.NOx_LR <- subset(test.data.frame.for.UREA, select = c(-UREA_WATER_FLOW_CONTROL, -FLUE_GAS_NOX))
# -------------------------------------------------------------------------------------------
# Perform Linear Regression (Y = NOx Generation)
# -------------------------------------------------------------------------------------------
NOx_Prediction_LR <- lm(Revised_NOX ~., data = train.data.frame.NOx_LR)
predict.line.for.NOx.LR <- as.data.frame(predict(NOx_Prediction_LR, newdata = test.data.frame.for.NOx_LR))
# -------------------------------------------------------------------------------------------
# Visualize Predict Result
# -------------------------------------------------------------------------------------------
plot(test.data.frame.for.NOx_LR$Revised_NOX, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="Linear Regression", lwd=3)
lines(predict.line.for.NOx.LR, col="red", lwd=2)
# -------------------------------------------------------------------------------------------
# Data Modification
# -------------------------------------------------------------------------------------------
h2o.init()
train.data.frame.NOx_LR.h2o <- as.h2o(subset(train.data.frame.Modified, select = c(-UREA_WATER_FLOW_CONTROL, -FLUE_GAS_NOX)))
test.data.frame.for.NOx_LR.h2o <- as.h2o(subset(test.data.frame.for.UREA, select = c(-UREA_WATER_FLOW_CONTROL, -FLUE_GAS_NOX)))
y <- "Revised_NOX"
x <- setdiff(names(train.data.frame.NOx_LR.h2o),y)
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o.1min <- h2o.deeplearning(x, y, train.data.frame.NOx_LR.h2o, activation = "Tanh", hidden = c(15),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o.1min   <- h2o.predict(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
performance.NOx.Emission.h2o.1min <- h2o.performance(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict, test.data.frame.for.NOx_LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o.1min <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict))
test.FLUE_GAS_NOX.1min       <- as.data.frame(as.numeric(test.data.frame.for.NOx_LR.h2o$Revised_NOX))
test.FLUE_GAS_NOX.1min       <- test.FLUE_GAS_NOX.1min[[1]]
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX.1min, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o.1min, col="red", lwd=2)
# -------------------------------------------------------------------------------------------
# Data Modification
# -------------------------------------------------------------------------------------------
h2o.init()
train.data.frame.NOx_LR.h2o <- as.h2o(subset(train.data.frame.Modified, select = c(-UREA_WATER_FLOW_CONTROL, -FLUE_GAS_NOX)))
test.data.frame.for.NOx_LR.h2o <- as.h2o(subset(test.data.frame.for.UREA, select = c(-UREA_WATER_FLOW_CONTROL, -FLUE_GAS_NOX)))
y <- "Revised_NOX"
x <- setdiff(names(train.data.frame.NOx_LR.h2o),y)
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o.1min <- h2o.deeplearning(x, y, train.data.frame.NOx_LR.h2o, activation = "Tanh", hidden = c(10),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o.1min   <- h2o.predict(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
performance.NOx.Emission.h2o.1min <- h2o.performance(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict, test.data.frame.for.NOx_LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o.1min <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict))
test.FLUE_GAS_NOX.1min       <- as.data.frame(as.numeric(test.data.frame.for.NOx_LR.h2o$Revised_NOX))
test.FLUE_GAS_NOX.1min       <- test.FLUE_GAS_NOX.1min[[1]]
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX.1min, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o.1min, col="red", lwd=2)
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o.1min <- h2o.deeplearning(x, y, train.data.frame.NOx_LR.h2o, activation = "Tanh", hidden = c(5),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o.1min   <- h2o.predict(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
performance.NOx.Emission.h2o.1min <- h2o.performance(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict, test.data.frame.for.NOx_LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o.1min <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict))
test.FLUE_GAS_NOX.1min       <- as.data.frame(as.numeric(test.data.frame.for.NOx_LR.h2o$Revised_NOX))
test.FLUE_GAS_NOX.1min       <- test.FLUE_GAS_NOX.1min[[1]]
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX.1min, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o.1min, col="red", lwd=2)
print("Model construction complete.")
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o.1min <- h2o.deeplearning(x, y, train.data.frame.NOx_LR.h2o, activation = "Tanh", hidden = c(3),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o.1min   <- h2o.predict(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
performance.NOx.Emission.h2o.1min <- h2o.performance(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict, test.data.frame.for.NOx_LR.h2o$Revised_NOX))
test.FLUE_GAS_NOX.1min       <- as.data.frame(as.numeric(test.data.frame.for.NOx_LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o.1min <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict))
test.FLUE_GAS_NOX.1min       <- test.FLUE_GAS_NOX.1min[[1]]
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX.1min, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o.1min, col="red", lwd=2)
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o.1min <- h2o.deeplearning(x, y, train.data.frame.NOx_LR.h2o, activation = "Tanh", hidden = c(5),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o.1min   <- h2o.predict(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
performance.NOx.Emission.h2o.1min <- h2o.performance(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict, test.data.frame.for.NOx_LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o.1min <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict))
test.FLUE_GAS_NOX.1min       <- test.FLUE_GAS_NOX.1min[[1]]
test.FLUE_GAS_NOX.1min       <- as.data.frame(as.numeric(test.data.frame.for.NOx_LR.h2o$Revised_NOX))
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX.1min, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o.1min, col="red", lwd=2)
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o.1min <- h2o.deeplearning(x, y, train.data.frame.NOx_LR.h2o, activation = "Tanh", hidden = c(5),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o.1min   <- h2o.predict(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
performance.NOx.Emission.h2o.1min <- h2o.performance(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict, test.data.frame.for.NOx_LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o.1min <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict))
test.FLUE_GAS_NOX.1min       <- as.data.frame(as.numeric(test.data.frame.for.NOx_LR.h2o$Revised_NOX))
test.FLUE_GAS_NOX.1min       <- test.FLUE_GAS_NOX.1min[[1]]
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX.1min, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o.1min, col="red", lwd=2)
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o.1min <- h2o.deeplearning(x, y, train.data.frame.NOx_LR.h2o, activation = "Tanh", hidden = c(5),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o.1min   <- h2o.predict(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
performance.NOx.Emission.h2o.1min <- h2o.performance(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict, test.data.frame.for.NOx_LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o.1min <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict))
test.FLUE_GAS_NOX.1min       <- as.data.frame(as.numeric(test.data.frame.for.NOx_LR.h2o$Revised_NOX))
test.FLUE_GAS_NOX.1min       <- test.FLUE_GAS_NOX.1min[[1]]
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX.1min, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o.1min, col="red", lwd=2)
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o.1min <- h2o.deeplearning(x, y, train.data.frame.NOx_LR.h2o, activation = "Tanh", hidden = c(5),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o.1min   <- h2o.predict(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
performance.NOx.Emission.h2o.1min <- h2o.performance(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict, test.data.frame.for.NOx_LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o.1min <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict))
test.FLUE_GAS_NOX.1min       <- as.data.frame(as.numeric(test.data.frame.for.NOx_LR.h2o$Revised_NOX))
test.FLUE_GAS_NOX.1min       <- test.FLUE_GAS_NOX.1min[[1]]
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX.1min, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o.1min, col="red", lwd=2)
# -------------------------------------------------------------------------------------------
# Data ?삎?떇 蹂?솚 (h2o)
# -------------------------------------------------------------------------------------------
## h2o Input data
h2o.init()
train.data.frame.h2o       <- as.h2o(subset(train.data.frame, select = c(-UREA_WATER_FLOW_CONTROL, -FLUE_GAS_NOX)))
test.data.frame.for.LR.h2o <- as.h2o(subset(test.data.frame.for.LR, select = c(-UREA_WATER_FLOW_CONTROL, -FLUE_GAS_NOX)))
y <- "Revised_NOX"
x <- setdiff(names(train.data.frame.h2o),y)
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o <- h2o.deeplearning(x, y, train.data.frame.h2o, activation = "Tanh", hidden = c(5),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o   <- h2o.predict(NOx.Emission.h2o, test.data.frame.for.LR.h2o)
performance.NOx.Emission.h2o <- h2o.performance(NOx.Emission.h2o, test.data.frame.for.LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o$predict, test.data.frame.for.LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o$predict))
test.FLUE_GAS_NOX       <- as.data.frame(as.numeric(test.data.frame.for.LR.h2o$Revised_NOX))
test.FLUE_GAS_NOX       <- test.FLUE_GAS_NOX[[1]]
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o, col="red", lwd=2)
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o <- h2o.deeplearning(x, y, train.data.frame.h2o, activation = "Tanh", hidden = c(5),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o   <- h2o.predict(NOx.Emission.h2o, test.data.frame.for.LR.h2o)
performance.NOx.Emission.h2o <- h2o.performance(NOx.Emission.h2o, test.data.frame.for.LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o$predict, test.data.frame.for.LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o$predict))
test.FLUE_GAS_NOX       <- as.data.frame(as.numeric(test.data.frame.for.LR.h2o$Revised_NOX))
test.FLUE_GAS_NOX       <- test.FLUE_GAS_NOX[[1]]
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o, col="red", lwd=2)
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o <- h2o.deeplearning(x, y, train.data.frame.h2o, activation = "Tanh", hidden = c(15),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o   <- h2o.predict(NOx.Emission.h2o, test.data.frame.for.LR.h2o)
performance.NOx.Emission.h2o <- h2o.performance(NOx.Emission.h2o, test.data.frame.for.LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o$predict, test.data.frame.for.LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o$predict))
test.FLUE_GAS_NOX       <- as.data.frame(as.numeric(test.data.frame.for.LR.h2o$Revised_NOX))
test.FLUE_GAS_NOX       <- test.FLUE_GAS_NOX[[1]]
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o, col="red", lwd=2)
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o.1min <- h2o.deeplearning(x, y, train.data.frame.NOx_LR.h2o, activation = "Tanh", hidden = c(15),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o.1min   <- h2o.predict(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
performance.NOx.Emission.h2o.1min <- h2o.performance(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict, test.data.frame.for.NOx_LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o.1min <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict))
test.FLUE_GAS_NOX.1min       <- as.data.frame(as.numeric(test.data.frame.for.NOx_LR.h2o$Revised_NOX))
test.FLUE_GAS_NOX.1min       <- test.FLUE_GAS_NOX.1min[[1]]
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX.1min, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o.1min, col="red", lwd=2)
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o.1min <- h2o.deeplearning(x, y, train.data.frame.NOx_LR.h2o, activation = "Tanh", hidden = c(25),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o.1min   <- h2o.predict(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
performance.NOx.Emission.h2o.1min <- h2o.performance(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict, test.data.frame.for.NOx_LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o.1min <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict))
test.FLUE_GAS_NOX.1min       <- as.data.frame(as.numeric(test.data.frame.for.NOx_LR.h2o$Revised_NOX))
test.FLUE_GAS_NOX.1min       <- test.FLUE_GAS_NOX.1min[[1]]
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX.1min, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o.1min, col="red", lwd=2)
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o.1min <- h2o.deeplearning(x, y, train.data.frame.NOx_LR.h2o, activation = "Tanh", hidden = c(5,5),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o.1min   <- h2o.predict(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
performance.NOx.Emission.h2o.1min <- h2o.performance(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict, test.data.frame.for.NOx_LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o.1min <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict))
test.FLUE_GAS_NOX.1min       <- as.data.frame(as.numeric(test.data.frame.for.NOx_LR.h2o$Revised_NOX))
test.FLUE_GAS_NOX.1min       <- test.FLUE_GAS_NOX.1min[[1]]
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX.1min, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o.1min, col="red", lwd=2)
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o.1min <- h2o.deeplearning(x, y, train.data.frame.NOx_LR.h2o, activation = "Tanh", hidden = c(10,10),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o.1min   <- h2o.predict(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
performance.NOx.Emission.h2o.1min <- h2o.performance(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict, test.data.frame.for.NOx_LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o.1min <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict))
test.FLUE_GAS_NOX.1min       <- as.data.frame(as.numeric(test.data.frame.for.NOx_LR.h2o$Revised_NOX))
test.FLUE_GAS_NOX.1min       <- test.FLUE_GAS_NOX.1min[[1]]
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX.1min, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o.1min, col="red", lwd=2)
# -------------------------------------------------------------------------------------------
# Construct ANN 紐⑤뜽
# -------------------------------------------------------------------------------------------
## Perform ANN
NOx.Emission.h2o.1min <- h2o.deeplearning(x, y, train.data.frame.NOx_LR.h2o, activation = "Tanh", hidden = c(5),
export_weights_and_biases = FALSE, standardize = TRUE)
predicted.NOx.Emission.h2o.1min   <- h2o.predict(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
performance.NOx.Emission.h2o.1min <- h2o.performance(NOx.Emission.h2o.1min, test.data.frame.for.NOx_LR.h2o)
as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict, test.data.frame.for.NOx_LR.h2o$Revised_NOX))
## ANN prediction plot with test.data.frame.for.LR
predict.line.for.LR.h2o.1min <- as.data.frame(h2o.cbind(predicted.NOx.Emission.h2o.1min$predict))
test.FLUE_GAS_NOX.1min       <- as.data.frame(as.numeric(test.data.frame.for.NOx_LR.h2o$Revised_NOX))
test.FLUE_GAS_NOX.1min       <- test.FLUE_GAS_NOX.1min[[1]]
# -------------------------------------------------------------------------------------------
# ?삁痢↔껐怨? ?떆媛곹솕
# -------------------------------------------------------------------------------------------
## ANN prediction plot with test data
plot(test.FLUE_GAS_NOX.1min, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="DeepLearning Model", lwd=3)
lines(predict.line.for.LR.h2o.1min, col="red", lwd=2)
# -----------------------------------------------------------------------------------
#  NOx Gap ?궛?젙
# -----------------------------------------------------------------------------------
NOx_Prediction_Train_Gap            <- (predict.line.for.LR.h2o - NOx.Emission_Trainset_UREA$Revised_NOX)
colnames(NOx_Prediction_Train_Gap)  <- "NOx_Gap"
NOx.Emission_Trainset_UREA_Gap      <- cbind(NOx.Emission_Trainset_UREA, NOx_Prediction_Train_Gap)
NOx.Emission_Trainset_UREA_Gap      <- subset(NOx.Emission_Trainset_UREA_Gap, select = c(-FLUE_GAS_NOX, -Revised_NOX))
# -----------------------------------------------------------------------------------
#  Linear Regression
# -----------------------------------------------------------------------------------
UREA_Flow_LR <- lm(UREA_WATER_FLOW_CONTROL ~., data = NOx.Emission_Trainset_UREA_Gap)
summary(UREA_Flow_LR)
# -------------------------------------------------------------------------------------------
# Data Modification
# -------------------------------------------------------------------------------------------
train.data.frame.NOx_LR <- subset(train.data.frame.Modified, select = c(-UREA_WATER_FLOW_CONTROL, -FLUE_GAS_NOX))
test.data.frame.for.NOx_LR <- subset(test.data.frame.for.UREA, select = c(-UREA_WATER_FLOW_CONTROL, -FLUE_GAS_NOX))
# -------------------------------------------------------------------------------------------
# Perform Linear Regression (Y = NOx Generation)
# -------------------------------------------------------------------------------------------
NOx_Prediction_LR <- lm(Revised_NOX ~., data = train.data.frame.NOx_LR)
predict.line.for.NOx.LR <- as.data.frame(predict(NOx_Prediction_LR, newdata = test.data.frame.for.NOx_LR))
# -------------------------------------------------------------------------------------------
# Visualize Predict Result
# -------------------------------------------------------------------------------------------
plot(test.data.frame.for.NOx_LR$Revised_NOX, type="l", pch=16,
col="blue", ylab="Revised_NOX", xlab=NA, main="Linear Regression", lwd=3)
lines(predict.line.for.NOx.LR, col="red", lwd=2)
